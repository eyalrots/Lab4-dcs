#include  "../header/bsp.h"    // private library - BSP layer

//-----------------------------------------------------------------------------
//           GPIO configuration
//-----------------------------------------------------------------------------
void GPIOconfig(void){

  WDTCTL = WDTHOLD | WDTPW;           // Stop WDT

    // LCD configuration
    LCD_DATA_WRITE &= ~0xE0;            // Bit clear P1.5-P1.7
    LCD_DATA_DIR   |= 0xE0;             // P1.5-P1.7 -> output('1')
    LCD_DATA_SEL   &= ~0xE0;              // GPIO capabilities
    LCD_CTL_SEL    &= ~0xE0;            // Bit clear P2.5-P2.7

    // PushButtons Setup
    PBsArrPortSel  &= ~BIT0;            // GPIO capability
    PBsArrPortDir  &= ~BIT0;            // input direction
    PBsArrIntEdgeSel |= BIT0;           // pull-up mode
//    PBsArrIntEdgeSel &= ~0x0C;          // pull-down mode
    PBsArrIntEn    |= BIT0;
    PBsArrIntPend  &= ~BIT0;            // clear pending interrupts

    // Buzzer Setup
    BuzzPortDir    |=  BIT4;            // P2.4 Output compare = '1'
    BuzzPortSel    |=  BIT4;            // P2.4 Select = '1'
//    BuzzPortOut    &=  ~BIT4;           // P2.4 out = '0'

    // POT setup
    POTPortDir     &= ~BIT3;
    POTPortSel     &= ~BIT3;

    _BIS_SR(GIE);                     // enable interrupts globally
}
//-------------------------------------------------------------------------------------
//                               Timers
//-------------------------------------------------------------------------------------
// timer A0 configuration
void TIMER0_A0_config(void){
    WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT
    TA0CCTL0 = CCIE;
    TACCR0 = 0xffff;
    TA0CTL = TASSEL_2 + MC_0 + ID_3;  //  select: 2 - SMCLK ; control: 3 - Up/down  ; divider: 3 - /8
}
// timer A1 configuration
void TIMER1_A1_config(void){
    TA1CCTL2 = CAP + CM_1 + CCIE + SCS + CCIS_0;
    TA1CCTL1 =  OUTMOD_7; // TA1CCR1 reset/set;
}
//-------------------------------------------------------------------------------------
//                               ADC
//-------------------------------------------------------------------------------------
void ADC_config(void) {
    ADC10CTL0 = SREF_0 + ADC10SHT_2 + MSC + ADC10IE;
    ADC10CTL0 &= ~ADC10IFG;

    ADC10CTL1 = INCH_3 + SHS_0 + ADC10SSEL_3 + CONSEQ_2;
    ADC10AE0 = BIT3; // enable P1.3 as analog input
}
//-------------------------------------------------------------------------------------
//                              UART init
//-------------------------------------------------------------------------------------
void UART_init(void){
    if (CALBC1_1MHZ==0xFF)                  // If calibration constant erased
    {
        while(1);                               // do not load, trap CPU!!
    }
    DCOCTL = 0;                               // Select lowest DCOx and MODx settings
    BCSCTL1 = CALBC1_1MHZ;                    // Set DCO
    DCOCTL = CALDCO_1MHZ;

//    P2DIR = 0xFF;                             // All P2.x outputs
//    P2OUT = 0;                                // All P2.x reset
    P1SEL |= BIT1 + BIT2 ;                     // P1.1 = RXD, P1.2=TXD
    P1SEL2 |= BIT1 + BIT2 ;                    // P1.1 = RXD, P1.2=TXD
//    P2DIR |= RXLED + TXLED;                   // LEDs for RX,TX
//    P2OUT &= 0x00;

    UCA0CTL1 |= UCSSEL_2;                     // CLK = SMCLK
    UCA0BR0 = 104;                            //
    UCA0BR1 = 0x00;                           //
    UCA0MCTL = UCBRS0;                        //
    UCA0CTL1 &= ~UCSWRST;                     // **Initialize USCI state machine**
    IE2 |= UCA0RXIE;
}

