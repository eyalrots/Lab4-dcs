#include  "../header/halGPIO.h"     // private library - HAL layer

const char quote[16] = "I love my Negev\0";

volatile int j, delay_ifg, Nadc;

extern volatile FSM_state_t state;
extern volatile SYS_mode_t lpm_mode;

extern volatile char x_string[];
extern volatile int PB1_pressed;

//--------------------------------------------------------------------
//             System Configuration
//--------------------------------------------------------------------
void sysConfig(void){
    GPIOconfig();
    TIMER0_A0_config();
    UART_init();
    ADC_config();
    delay_ifg = 1;
    j = 0;
}
//---------------------------------------------------------------------
//            Polling based Delay function
//---------------------------------------------------------------------
void delay(unsigned int t){  //
    volatile unsigned int i;

    for(i=t; i>0; i--);
}
//---------------------------------------------------------------------
//            Enter from LPM0 mode
//---------------------------------------------------------------------
void enterLPM(unsigned char LPM_level){
    if (LPM_level == 0x00)
      _BIS_SR(LPM0_bits);     /* Enter Low Power Mode 0 */
        else if(LPM_level == 0x01)
      _BIS_SR(LPM1_bits);     /* Enter Low Power Mode 1 */
        else if(LPM_level == 0x02)
      _BIS_SR(LPM2_bits);     /* Enter Low Power Mode 2 */
    else if(LPM_level == 0x03)
      _BIS_SR(LPM3_bits);     /* Enter Low Power Mode 3 */
        else if(LPM_level == 0x04)
      _BIS_SR(LPM4_bits);     /* Enter Low Power Mode 4 */
}
//---------------------------------------------------------------------
//            Enable interrupts
//---------------------------------------------------------------------
void enable_interrupts(){
  _BIS_SR(GIE);
}
//---------------------------------------------------------------------
//            Disable interrupts
//---------------------------------------------------------------------
void disable_interrupts(){
  _BIC_SR(GIE);
}
//---------------------------------------------------------------------
//            LCD
//---------------------------------------------------------------------
//******************************************************************
// send a command to the LCD -> copied
//******************************************************************
void lcd_cmd(unsigned char c){

    LCD_WAIT; // may check LCD busy flag, or just delay a little, depending on lcd.h

    if (LCD_MODE == FOURBIT_MODE)
    {
        LCD_DATA_WRITE &= ~OUTPUT_DATA;// clear bits before new write
        LCD_DATA_WRITE |= ((c >> 4) & 0x0F) << LCD_DATA_OFFSET;
        lcd_strobe();
        LCD_DATA_WRITE &= ~OUTPUT_DATA;
        LCD_DATA_WRITE |= (c & (0x0F)) << LCD_DATA_OFFSET;
        lcd_strobe();
    }
    else
    {
        LCD_DATA_WRITE = c;
        lcd_strobe();
    }
}
//******************************************************************
// send data to the LCD -> copied
//******************************************************************
void lcd_data(unsigned char c){

    LCD_WAIT; // may check LCD busy flag, or just delay a little, depending on lcd.h

    LCD_DATA_WRITE &= ~OUTPUT_DATA;
    LCD_RS(1);
    if (LCD_MODE == FOURBIT_MODE)
    {
            LCD_DATA_WRITE &= ~OUTPUT_DATA;
            LCD_DATA_WRITE |= ((c >> 4) & 0x0F) << LCD_DATA_OFFSET;
            lcd_strobe();
            LCD_DATA_WRITE &= (0xF0 << LCD_DATA_OFFSET) | (0xF0 >> 8 - LCD_DATA_OFFSET);
            LCD_DATA_WRITE &= ~OUTPUT_DATA;
            LCD_DATA_WRITE |= (c & 0x0F) << LCD_DATA_OFFSET;
            lcd_strobe();
    }
    else
    {
            LCD_DATA_WRITE = c;
            lcd_strobe();
    }

    LCD_RS(0);
}
//******************************************************************
// write a string of chars to the LCD -> copied
//******************************************************************
void lcd_puts(const char * s){

    while(*s)
        lcd_data(*s++);
}
//******************************************************************
// initialize the LCD -> copied
//******************************************************************
void lcd_init(){

    char init_value;

    if (LCD_MODE == FOURBIT_MODE) init_value = 0x03 << LCD_DATA_OFFSET;
    else init_value = 0x3F;

    LCD_RS_DIR(OUTPUT_PIN);
    LCD_EN_DIR(OUTPUT_PIN);
    LCD_RW_DIR(OUTPUT_PIN);
    LCD_DATA_DIR |= OUTPUT_DATA;
    LCD_RS(0);
    LCD_EN(0);
    LCD_RW(0);

    // sanity check - need mental health hospital?
    P2DIR |= 0xe0;
    P2OUT |= 0xe0;
    P2OUT &= ~0xe0;

    DelayMs(15);
    LCD_DATA_WRITE &= ~OUTPUT_DATA;
    LCD_DATA_WRITE |= init_value;
    lcd_strobe();
    DelayMs(5);
    LCD_DATA_WRITE &= ~OUTPUT_DATA;
    LCD_DATA_WRITE |= init_value;
    lcd_strobe();
    DelayUs(200);
    LCD_DATA_WRITE &= ~OUTPUT_DATA;
    LCD_DATA_WRITE |= init_value;
    lcd_strobe();

    if (LCD_MODE == FOURBIT_MODE){
        LCD_WAIT; // may check LCD busy flag, or just delay a little, depending on lcd.h
        LCD_DATA_WRITE &= ~OUTPUT_DATA;
        LCD_DATA_WRITE |= 0x2 << LCD_DATA_OFFSET; // Set 4-bit mode
        lcd_strobe();
        lcd_cmd(0x28); // Function Set
    }
    else lcd_cmd(0x3C); // 8bit,two lines,5x10 dots

    lcd_cmd(0xF); //Display On, Cursor On, Cursor Blink
    lcd_cmd(0x1); //Display Clear
    lcd_cmd(0x6); //Entry Mode
    lcd_cmd(0x80); //Initialize DDRAM address to zero
}
//******************************************************************
// lcd strobe functions -> copied
//******************************************************************
void lcd_strobe(){
  LCD_EN(1);
  asm("NOP");
 // asm("NOP");
  LCD_EN(0);
}
//******************************************************************
// Delay usec functions -> copied
//******************************************************************
void DelayUs(unsigned int cnt){

    unsigned char i;
    for(i=cnt ; i>0 ; i--) asm("nop"); // tha command asm("nop") takes raphly 1usec

}
//******************************************************************
// Delay msec functions -> copied
//******************************************************************
void DelayMs(unsigned int cnt){

    unsigned char i;
    for(i=cnt ; i>0 ; i--) DelayUs(1000); // tha command asm("nop") takes raphly 1usec

}
//-------------------------------------------------------------
//                      Timers
//-------------------------------------------------------------
// timer A0 -> ~480ms
void startTimerA0(){
    TACCR0 = 0xffff; //->some function of X!
    TA0CTL = TASSEL_2 + MC_1 + ID_3;  //  select: 2 - SMCLK ; control: 1 - Up  ; divider: 3 - /8
    __bis_SR_register(LPM0_bits + GIE);       // Enter LPM0 w/ interrupt
}
//-------------------------------------------------------------
//                      Buttons
//-------------------------------------------------------------
// disable buttons
void button_disable() {
    PBsArrIntEn &= ~0x0f;
}
// enable buttons
void button_enable() {
    PBsArrIntEn |= 0x0f;
}
//---------------------------------------------------------------------
//                       ADC
//---------------------------------------------------------------------
// Begin Sample and Hold
void adc_start_conversion(void) {
    ADC10CTL0 |= ADC10ON;         //turn on the ADC10
    ADC10CTL0 |= ENC | ADC10SC;   // enable conversion, start conversion

}
// Halt Sample and Hold
void adc_stop_conversion(void) {
    ADC10CTL0 &= ~ (ENC | ADC10SC);
}
// Get potentiometer value
int pot_read(){  //
    return Nadc * 330 / 1023;
}
//---------------------------------------------------------------------
//                       UART
//---------------------------------------------------------------------
// Enable Transmission to PC
void uart_tx_enable(void) {
    IE2 |= UCA0TXIE;
}
// Disable Transmission to PC
void uart_tx_disable(void) {
    IE2 &= ~UCA0TXIE;
}
// Enable Receiving from PC
void uart_rx_enable(void) {
    IE2 |= UCA0RXIE;
}
// Disable Receiving from PC
void uart_rx_disable(void) {
    IE2 &= ~UCA0RXIE;
}
//*********************************************************************
//           ADC10 Interrupt Service Routine
//*********************************************************************
#pragma vector=ADC10_VECTOR
__interrupt void ADC_handler(void) {
    Nadc = ADC10MEM;
}
//*********************************************************************
//            TimerA0 Interrupt Service Routine
//*********************************************************************
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector = TIMER0_A0_VECTOR
__interrupt void Timer_A (void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(TIMER0_A0_VECTOR))) Timer_A (void)
#else
#error Compiler not supported!
#endif
{
    LPM0_EXIT;
    TACTL = MC_0+TACLR;
}
//*********************************************************************
//            TimerA1 Interrupt Service Routine
//*********************************************************************
//#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector = TIMER1_A1_VECTOR
__interrupt void TIMER1_A1_ISR(void)
//#elif defined(__GNUC__)
//void __attribute__ ((interrupt(TIMER1_A1_VECTOR))) TIMER1_A1_ISR (void)
//#else
//#error Compiler not supported!
//#endif
{
//  switch(__even_in_range(TA1IV, 0x0A))
//  {
//      case  TA1IV_NONE: break;              // Vector  0:  No interrupt
//      case  TA1IV_TACCR1:                   // Vector  2:  TACCR1 CCIFG
//          TA1CTL &= ~(TAIFG);
//          break;
//      case TA1IV_TACCR2: break;             // Vector  4:  TACCR2 CCIFG
//      case TA1IV_6: break;                  // Vector  6:  Reserved CCIFG
//      case TA1IV_8: break;                  // Vector  8:  Reserved CCIFG
//      case TA1IV_TAIFG: break;              // Vector 10:  TAIFG
//      default:  break;
//  }
    TA1CTL &= ~TAIFG;
}
//*********************************************************************
//            Port1 Interrupt Service Routine
//*********************************************************************
#pragma vector=PORT1_VECTOR
  __interrupt void PBs_handler(void){

    delay(debounceVal);

    // selector of transition between states
//    if(PBsArrIntPend & PB0){
//      state = state1;
//      PBsArrIntPend &= ~PB0;
//    }
    if(PBsArrIntPend & BIT0){
      PB1_pressed = 1;
      PBsArrIntPend &= ~BIT0;
    }
//    else if(PBsArrIntPend & PB2){
//      state = state3;
//      PBsArrIntPend &= ~PB2;
//     }
//    else if(PBsArrIntPend & PB3){
//        state = state4;
//        PBsArrIntPend &= ~PB3;
//    }

    // Exit from a given LPM
    switch(lpm_mode){
        case mode0:
            LPM0_EXIT; // must be called from ISR only
            break;

        case mode1:
            LPM1_EXIT; // must be called from ISR only
            break;

        case mode2:
            LPM2_EXIT; // must be called from ISR only
            break;

        case mode3:
            LPM3_EXIT; // must be called from ISR only
            break;

        case mode4:
            LPM4_EXIT; // must be called from ISR only
            break;
    }

}
//*********************************************************************
//                           TX ISR
//*********************************************************************
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=USCIAB0TX_VECTOR
__interrupt void USCI0TX_ISR(void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(USCIAB0TX_VECTOR))) USCI0TX_ISR (void)
#else
#error Compiler not supported!
#endif
{
    static unsigned int i = 0;
    lcd_new_line;
    if (quote[i] != '\0') {
        UCA0TXBUF = quote[i++];
    }
    else if (quote[i] == '\0') {
        UCA0TXBUF = '\n';
        PB1_pressed = 0;
        i = 0;
        IE2 &= ~UCA0TXIE;
        LPM0_EXIT;
    }
}
//*********************************************************************
//                         RX ISR
//*********************************************************************
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=USCIAB0RX_VECTOR
__interrupt void USCI0RX_ISR(void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(USCIAB0RX_VECTOR))) USCI0RX_ISR (void)
#else
#error Compiler not supported!
#endif
{
//  if(UCA0RXBUF == '1' && delay_ifg == 0){
//      state = state1;
//      IE2 |= UCA0TXIE;
//  }
//  else if(UCA0RXBUF == '2' && delay_ifg == 0){
//      state = state2;
//      IE2 |= UCA0TXIE;
//  }
//  else if(UCA0RXBUF == '3' && delay_ifg == 0){
//      if (delay_ifg == 1){
//          x_string[j] = UCA0RXBUF;
//          j++;
//          if (x_string[j-1] == '\n'){
//              j = 0;
//              delay_ifg = 0;
//              // state_flag = 0;
//              state = state3;
//              IE2 |= UCA0TXIE;        // Enable USCI_A0 TX interrupt
//
//          }
//      }
//      else{
//          delay_ifg = 1;
//          IE2 |= UCA0TXIE;        // Enable USCI_A0 TX interrupt
//      }
//  }
//  else if(UCA0RXBUF == '4' || delay_ifg){
//      state = state4;
//      IE2 |= UCA0TXIE;
//
//  }
//  else if(UCA0RXBUF == '5' && delay_ifg == 0){
//      state = state5;
//      IE2 |= UCA0TXIE;
//  }
//  else if(UCA0RXBUF == '6' && delay_ifg == 0){
//      state = state6;
//      IE2 |= UCA0TXIE;
//  }
//  else if(UCA0RXBUF == '7' && delay_ifg == 0){ //RealTime
//      state = state7;
//      IE2 |= UCA0TXIE;
//  }
//  else if(UCA0RXBUF == '8' && delay_ifg == 0){
//      state = state8;
//      IE2 |= UCA0TXIE;                        // Enable USCI_A0 TX interrupt
//  }
//  else if(UCA0RXBUF == '9' && delay_ifg == 0){
//      state = state9;
//      IE2 |= UCA0TXIE;
//  }

    if (!delay_ifg) {
        x_string[j++] = UCA0RXBUF;
        if (j == 3) {
            delay_ifg = !delay_ifg;
            j = 0;
        }
    }

    switch(UCA0RXBUF) {
        case '1':
            state = state1;
            break;
        case '2':
            state = state2;
            break;
        case '3':
            state = state3;
            delay_ifg = 0;
            break;
        case '4':
            state = state4;
            break;
        case '5':
            state = state5;
//            uart_tx_enable();
            break;
        case '6':
            state = state6;
            break;
        case '7':
            state = state7;
            break;
        case '8':
            state = state8;
            break;
    }

  switch(lpm_mode){
  case mode0:
      LPM0_EXIT; // must be called from ISR only
      break;
  case mode1:
      LPM1_EXIT; // must be called from ISR only
      break;
  case mode2:
      LPM2_EXIT; // must be called from ISR only
      break;
  case mode3:
      LPM3_EXIT; // must be called from ISR only
      break;
  case mode4:
      LPM4_EXIT; // must be called from ISR only
      break;
  }
}
